import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import numpy as np
import math
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib
matplotlib.use('TkAgg')

def compare_function(file_name, indices, samples):
    expected_indices = []
    expected_samples = []
    with open(file_name, 'r') as f:
        line = f.readline()
        line = f.readline()
        line = f.readline()
        line = f.readline()
        while line:
            # process line
            L = line.strip()
            if len(L.split(' ')) == 2:
                L = line.split(' ')
                V1 = int(L[0])
                V2 = float(L[1])
                expected_indices.append(V1)
                expected_samples.append(V2)
                line = f.readline()
            else:
                break
    
    if len(expected_samples) != len(samples):
        print("Test case failed: signal length mismatch.")
        return False

    for i in range(len(expected_samples)):
        if abs(samples[i] - expected_samples[i]) >= 0.01:
            print("Test case failed: signal mismatch at index", i)
            return False

    print("Test case passed successfully!")
    return True

class DCTCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("DCT Calculator")
        self.root.geometry("1200x600")
        
        # Variables
        self.input_data = []
        self.dct_result = []
        
        # Create main container
        main_container = ttk.PanedWindow(root, orient=tk.HORIZONTAL)
        main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Left frame for controls
        left_frame = ttk.Frame(main_container, padding="5")
        main_container.add(left_frame, weight=1)
        
        # Right frame for plots
        right_frame = ttk.Frame(main_container, padding="5")
        main_container.add(right_frame, weight=2)
        
        # === Left Frame Contents ===
        # Input section
        ttk.Label(left_frame, text="Input Data:").pack(anchor=tk.W)
        self.input_text = tk.Text(left_frame, height=8, width=40)
        self.input_text.pack(fill=tk.X, pady=5)
        
        # Button frame
        button_frame = ttk.Frame(left_frame)
        button_frame.pack(fill=tk.X, pady=5)
        ttk.Button(button_frame, text="Load Input File", command=self.load_input).pack(side=tk.LEFT, padx=2)
        ttk.Button(button_frame, text="Compute DCT", command=self.compute_dct).pack(side=tk.LEFT, padx=2)
        
        # Add Compare Button
        ttk.Button(button_frame, text="Compare with Expected", command=self.compare_results).pack(side=tk.LEFT, padx=2)
        
        # Coefficient selection frame
        coef_frame = ttk.Frame(left_frame)
        coef_frame.pack(fill=tk.X, pady=5)
        ttk.Label(coef_frame, text="Number of coefficients to save:").pack(side=tk.LEFT, padx=2)
        self.coef_var = tk.StringVar(value="6")  # Default value
        self.coef_entry = ttk.Entry(coef_frame, textvariable=self.coef_var, width=10)
        self.coef_entry.pack(side=tk.LEFT, padx=2)
        ttk.Button(coef_frame, text="Save Coefficients", command=self.save_coefficients).pack(side=tk.LEFT, padx=2)
        
        # Result section
        ttk.Label(left_frame, text="DCT Result:").pack(anchor=tk.W, pady=(10,0))
        self.result_text = tk.Text(left_frame, height=12, width=40)
        self.result_text.pack(fill=tk.X, pady=5)
        
        # === Right Frame Contents ===
        # Create figure and canvas for plotting
        self.fig, (self.ax1, self.ax2) = plt.subplots(2, 1, figsize=(8, 8))
        self.canvas = FigureCanvasTkAgg(self.fig, master=right_frame)
        self.canvas.draw()
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Adjust plot layout
        plt.tight_layout()

    def load_input(self):
        filename = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if filename:
            try:
                with open(filename, 'r') as file:
                    content = file.read()
                    self.input_text.delete(1.0, tk.END)
                    self.input_text.insert(tk.END, content)
                    
                    # Parse input data
                    lines = content.strip().split('\n')
                    self.input_data = []
                    for line in lines:
                        values = line.strip().split()
                        if len(values) >= 2:
                            self.input_data.append(float(values[1]))
            except Exception as e:
                messagebox.showerror("Error", f"Error loading file: {str(e)}")

    def compute_dct(self):
        try:
            # Get input data
            if not self.input_data:
                raw_text = self.input_text.get(1.0, tk.END).strip()
                lines = raw_text.split('\n')
                self.input_data = []
                for line in lines:
                    values = line.strip().split()
                    if len(values) >= 2:
                        self.input_data.append(float(values[1]))
            
            N = len(self.input_data)
            self.dct_result = []
            
            # Compute DCT using the given formula
            for k in range(N):
                sum_val = 0
                for n in range(N):
                    cos_term = math.cos((math.pi / (4 * N)) * (2 * n - 1) * (2 * k - 1))
                    sum_val += self.input_data[n] * cos_term
                y_k = math.sqrt(2.0 / N) * sum_val
                self.dct_result.append(y_k)
            
            # Display result in the specified format
            self.result_text.delete(1.0, tk.END)
            # First three lines
            self.result_text.insert(tk.END, "0\n1\n6\n")
            # DCT results
            for val in self.dct_result:
                self.result_text.insert(tk.END, f"0 {val:.6f}\n")
            
            # Update plots
            self.plot_results()
                
        except Exception as e:
            messagebox.showerror("Error", f"Error computing DCT: {str(e)}")

    def plot_results(self):
        if not self.input_data or not self.dct_result:
            return
            
        # Clear previous plots
        self.ax1.clear()
        self.ax2.clear()
        
        # Plot input signal
        x_input = range(len(self.input_data))
        self.ax1.stem(x_input, self.input_data, basefmt='b-', linefmt='b-', markerfmt='bo')
        self.ax1.set_title('Input Signal')
        self.ax1.set_xlabel('Index')
        self.ax1.set_ylabel('Amplitude')
        self.ax1.grid(True)
        
        # Plot DCT coefficients
        x_dct = range(len(self.dct_result))
        self.ax2.stem(x_dct, self.dct_result, basefmt='r-', linefmt='r-', markerfmt='ro')
        self.ax2.set_title('DCT Coefficients')
        self.ax2.set_xlabel('Frequency Index (k)')
        self.ax2.set_ylabel('Magnitude')
        self.ax2.grid(True)
        
        # Adjust layout and refresh canvas
        self.fig.tight_layout()
        self.canvas.draw()

    def save_coefficients(self):
        try:
            if not self.dct_result:
                messagebox.showerror("Error", "Please compute DCT first")
                return
            
            try:
                m = int(self.coef_var.get())
                if m <= 0 or m > len(self.dct_result):
                    messagebox.showerror("Error", f"Number of coefficients must be between 1 and {len(self.dct_result)}")
                    return
            except ValueError:
                messagebox.showerror("Error", "Please enter a valid number of coefficients")
                return
                
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
            )
            
            if filename:
                with open(filename, 'w') as file:
                    # Write header
                    file.write("0\n1\n6\n")
                    # Write selected number of DCT results
                    for i in range(m):
                        file.write(f"0 {self.dct_result[i]:.6f}\n")
                messagebox.showinfo("Success", f"Saved {m} coefficients to file")
                
        except Exception as e:
            messagebox.showerror("Error", f"Error saving results: {str(e)}")

    def compare_results(self):
        try:
            # Ask the user to select the expected result file
            filename = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
            if filename:
                # Compare the computed DCT with the expected values
                if self.dct_result:
                    indices = range(len(self.dct_result))
                    compare_function(filename, indices, self.dct_result)
                else:
                    messagebox.showerror("Error", "Please compute the DCT first.")
        except Exception as e:
            messagebox.showerror("Error", f"Error comparing results: {str(e)}")

# Create Tkinter window
root = tk.Tk()
app = DCTCalculator(root)
root.mainloop()
