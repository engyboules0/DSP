import math
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import matplotlib.pyplot as plt

def browse_file():
    """Open a file dialog to browse for the input file."""
    file_path = filedialog.askopenfilename(
        filetypes=[("Text Files", "*.txt")],
        title="Select Input Signal File"
    )
    return file_path

def read_input_file(file_path):
    """Reads the input file and extracts the signal values."""
    signal = []
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()

        # Extract signal values starting from the fourth line
        for line in lines[3:]:
            _, value = line.split()  # Split the line into index and value
            signal.append(float(value))  # Append the signal value

        return signal
    except Exception as e:
        messagebox.showerror("Error", f"Error reading the file: {e}")
        return None

def compute_dft(signal):
    """Manually compute the Discrete Fourier Transform (DFT)."""
    n = len(signal)
    real = [0] * n
    imag = [0] * n
    amplitude = [0] * n
    phase = [0] * n

    for k in range(n):
        for t in range(n):
            angle = -2 * math.pi * k * t / n
            real[k] += signal[t] * math.cos(angle)
            imag[k] += signal[t] * math.sin(angle)
        # Calculate amplitude and phase
        amplitude[k] = math.sqrt(real[k]**2 + imag[k]**2)
        phase[k] = math.atan2(imag[k], real[k])
    
    return real, imag, amplitude, phase

def compute_idft(real, imag):
    """Manually compute the Inverse Discrete Fourier Transform (IDFT)."""
    n = len(real)
    reconstructed_signal = []

    for t in range(n):
        value = 0
        for k in range(n):
            angle = 2 * math.pi * k * t / n
            value += real[k] * math.cos(angle) - imag[k] * math.sin(angle)
        reconstructed_signal.append(value / n)  # Scale by 1/n

    return reconstructed_signal

def plot_dft(amplitude, phase, sampling_freq):
    """Plot the frequency vs. amplitude and frequency vs. phase with vertical lines in rad/s."""
    n = len(amplitude)
    # Convert frequency from Hz to radians per second
    freqs_rad_s = [2 * math.pi * k / n * sampling_freq for k in range(n)]
    
    # Create a figure for the plots
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6))

    # Frequency vs. Amplitude plot with vertical lines
    ax1.set_title('Frequency vs Amplitude')
    ax1.set_xlabel('Frequency (rad/s)')
    ax1.set_ylabel('Amplitude')
    for k in range(n):
        ax1.vlines(freqs_rad_s[k], 0, amplitude[k], color='b')  # Vertical line at each frequency
        ax1.scatter(freqs_rad_s[k], amplitude[k], color='r')  # Scatter point for each frequency-amplitude pair

    # Frequency vs. Phase plot with vertical lines
    ax2.set_title('Frequency vs Phase')
    ax2.set_xlabel('Frequency (rad/s)')
    ax2.set_ylabel('Phase (radians)')
    for k in range(n):
        ax2.vlines(freqs_rad_s[k], 0, phase[k], color='b')  # Vertical line at each frequency
        ax2.scatter(freqs_rad_s[k], phase[k], color='r')  # Scatter point for each frequency-phase pair

    # Display the plots
    plt.tight_layout()
    plt.show()

def SignalComapreAmplitude(SignalInput = [] ,SignalOutput= []):
    if len(SignalInput) != len(SignalOutput):
        return False
    else:
        for i in range(len(SignalInput)):
            # Increase tolerance to account for numerical precision
            if abs(SignalInput[i] - SignalOutput[i]) > 0.01:  # Increased tolerance
                return False
        return True

def RoundPhaseShift(P):
    while P < 0:
        P += 2 * math.pi
    return float(P % (2 * math.pi))

def SignalComaprePhaseShift(SignalInput = [], SignalOutput = []):
    if len(SignalInput) != len(SignalOutput):
        return False
    else:
        for i in range(len(SignalInput)):
            A = round(SignalInput[i])
            B = round(SignalOutput[i])
            if abs(A - B) > 0.0001:
                return False
            elif A != B:
                return False
        return True

def on_compute():
    """Called when the compute button is clicked."""
    # Get file path
    file_path = browse_file()
    if not file_path:
        return
    
    # Read signal from the selected file
    signal = read_input_file(file_path)
    if signal is None:
        return
    
    # Get sampling frequency from the user input
    try:
        sampling_freq = float(sampling_freq_entry.get())
    except ValueError:
        messagebox.showerror("Input Error", "Please enter a valid number for the sampling frequency.")
        return
    
    # Compute DFT
    real, imag, amplitude, phase = compute_dft(signal)

    # Plot the frequency vs amplitude and frequency vs phase
    plot_dft(amplitude, phase, sampling_freq)

    # Compute IDFT
    reconstructed_signal = compute_idft(real, imag)

    # Test the amplitude and phase of DFT and IDFT
    if SignalComapreAmplitude(signal, reconstructed_signal):
        print("Amplitude test passed!")
    else:
        print("Amplitude test failed!")

    if SignalComaprePhaseShift(phase, [math.atan2(imag[i], real[i]) for i in range(len(imag))]):
        print("Phase shift test passed!")
    else:
        print("Phase shift test failed!")

    # Format the output
    formatted_output = ["0", "0", "8"]  # Add initial fixed values
    for idx, value in enumerate(reconstructed_signal):
        formatted_output.append(f"{idx} {round(value)}")  # Append index and rounded value

    # Display the formatted output
    output_text.delete(1.0, tk.END)
    output_text.insert(tk.END, "Reconstructed Signal(IDFT):\n")
    output_text.insert(tk.END, "\n".join(formatted_output))

# Create the main window
root = tk.Tk()
root.title("DFT and IDFT Computation Tool")

# Sampling frequency input
sampling_freq_label = tk.Label(root, text="Enter Sampling Frequency (Hz):")
sampling_freq_label.pack(pady=10)

sampling_freq_entry = tk.Entry(root, width=20)
sampling_freq_entry.pack(pady=5)

# Compute button
compute_button = tk.Button(root, text="Compute DFT and IDFT", command=on_compute)
compute_button.pack(pady=20)

# Output text area
output_text = scrolledtext.ScrolledText(root, width=60, height=20)
output_text.pack(pady=10)

# Run the GUI loop
root.mainloop()
